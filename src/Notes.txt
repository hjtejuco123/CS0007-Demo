
https://github.com/hjtejuco123/CS0007-Demo
https://github.com/hjtejuco123/CS0007-Demo/tree/master/src


UML Design
BankSystem

Problem 
    Banking system
        Deposit (500)
        Withdraw  (200)
        New Balance (300)
    Input
        Ask the user to input account number
            accountNumber (attribute) - String
    Process 
        Performing 
            Deposit
            Withdrawal

    Display the current balance
            balance (attribute) - double 

Process/ Method
    BankAccount - constructor
    deposit()
        //operations
            will check the amount if > 0
                balance + amount
            else
                amount should be positive value

    withdraw ()
        //operations    
            check the amount>0 and amount <= balance 
                balance - amount
            else
                insufficient balance or invalid amount

    checkBalance ()




Class - GasStation

Gas Station Application
    pricePerLiter = 2.50;  //final (constant)
    double
    private

Methods
    GasStation()
    calculateTotal(double): double

Input
    Enter the number of liters

Process
    liters *  pricePerLiter

Output
    Total Cost




Programming Model
    Procedural
    OOP
        Benefits
            Abstraction
            Encapsulation
            Inheritance
            Polymorphism
    Class
        Attributes
        Constructor
    Standard Methods
        Mutator
        Accessors
    this keyword
    Object
    Access modifiers
        private
        public
        default
        protected 
    Modifiers/Qualifiers
        final
        static
        abstract
        interface
    Classification of variables
        Instance Variable
        class variable
        local variables
    Object Relation
        Association
        Inheritance
    Object relationship
        superclass
        subclass
        abstract class
    
    UML 
        Class Diagram
    Attributes and Operations
        Access modifiers



            
Module 6
Encapsulation and Inheritance

    Protect sensitive data
    -restrict access to attributes(var) of a class

    1.  Set variables to private
        Class variable restricted access from outside the class

    2. Getter(accessor) and Setters(mutator)
            get and set

        this.name = newName;
    //The this keyword is used to refer to  the current object.

---------------------------------------------------

Student Information System

Input
    Enter student name (name) (getName)/(setName)
    Enter student age (age)(getAge)/(setAge)
    Enter student grade (grade) (getGrade) / (setGrade)

    ---------------------------

Process
    Update the details and display the output


Inheritance 

    inherit fields and methods from another class.
    re-usability 






















Procedure - Method is block of codes that performs a 
specific function

General Syntax

[access modifiers] return_type method_name[paramater_list]{
        method body
        contains the code to be executed when called
    
    return value (int, float, double, char) void
}

access modifiers
    public - method is accessible by other classes
    private - method is only accessible within the same class
    protected - method is accessible within the same package
        or subclasses

return_type
    int, String, void


method_name
    name of the method *camelCase

paramater_list  *optional 
    parameters are separated values

    
Class car
    brand
    model
    year

Toyota 
Corolla
2000

Honda
Civic
1998



























if else
    
    if (condition){
        //true statement
    }else{
        //false statement 

    }

if else if else 

    if (condition) {
        statement_1;
    }else if (condition2){
        statement_2;
        ....
    }else{
        statement_3;
    }

      1      2=T       4
for (init; condition; inc/dec){     //how many times will it execute1
    statements; // 3                x<=4  
}

init;
while(condition){       while(Condition->true) {
    statement;              statement;
    inc/dec;
}                       }

                        //break, return 

init;
do {
    statement;
    inc/dec;
}while(condition);



psvm <tab> – public static void main(String[]args)
sout <tab> – System.out.println(” “)
for <tab> – the simple for loop
fori<tab> – for loop with an object array
if <tab> – starts your if statement for you
ifelse<tab> – if else statement
wh<tab> – while loop
do <tab> – the do while loop
<alt> <shift> <f> – will sort out your horrible indenting
bcom<tab. – /* */ multiple line comment
trycatch <tab> – for the try  . . . catch statement
sw<tab> – switch case break statement



HJT ATM System

1. Add a user
2. Check Balance
3. Deposit Money
4. Withdraw Money
5. View account summary
6. Exit


















